import 'package:flutter/material.dart';
import 'package:get/get.dart';
import '../../controllers/{{.StructName | toSnakeCase}}_controller.dart';
import '../../models/{{.StructName | toSnakeCase}}.dart';

class {{.PluralName}}GridView extends StatelessWidget {
  final {{.PluralName}}Controller controller;

  const {{.PluralName}}GridView({
    super.key,
    required this.controller,
  });

  @override
  Widget build(BuildContext context) {
    return GridView.builder(
      padding: const EdgeInsets.all(16),
      gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
        crossAxisCount: MediaQuery.of(context).size.width < 1200 ? 2 : 3,
        childAspectRatio: 1,
        crossAxisSpacing: 16,
        mainAxisSpacing: 16,
      ),
      itemCount: controller.items.length,
      itemBuilder: (context, index) {
        final item = controller.items[index];
        return _buildGridItem(item);
      },
    );
  }

  Widget _buildGridItem({{.StructName}} item) {
    return Card(
      clipBehavior: Clip.antiAlias,
      child: InkWell(
        onTap: () => Get.toNamed('/{{.LowerPluralStructName}}/show/${item.id}', arguments: item),
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              _buildAvatar(item),
              const SizedBox(height: 16),
              Text(
                {{- if .Fields}}
                {{- with index .Fields 0}}
                item.{{.Name | toCamelCase}}?.toString() ?? 'No {{.Name}}'
                {{- end}}
                {{- else}}
                'Item ${item.id}'
                {{- end}},
                style: const TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                ),
                maxLines: 1,
                overflow: TextOverflow.ellipsis,
              ),
              const SizedBox(height: 4),
              Text(
                {{- if ge (len .Fields) 2}}
                {{- with index .Fields 1}}
                item.{{.Name | toCamelCase}}?.toString() ?? 'No {{.Name}}'
                {{- end}}
                {{- else}}
                'ID: ${item.id}'
                {{- end}},
                style: TextStyle(
                  fontSize: 14,
                  color: Colors.grey.shade600,
                ),
                maxLines: 1,
                overflow: TextOverflow.ellipsis,
              ),
              const Spacer(),
              _buildActions(item),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildAvatar({{.StructName}} item) {
    return CircleAvatar(
      radius: 40,
      backgroundColor: Colors.blue.shade100,
      child: Text(
        {{- if .Fields}}
        {{- with index .Fields 0}}
        item.{{.Name | toCamelCase}}?.toString()[0].toUpperCase() ?? '?'
        {{- end}}
        {{- else}}
        item.id.toString()[0]
        {{- end}},
        style: TextStyle(
          color: Colors.blue.shade700,
          fontSize: 32,
          fontWeight: FontWeight.bold,
        ),
      ),
    );
  }

  Widget _buildActions({{.StructName}} item) {
    return Row(
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        IconButton(
          icon: const Icon(Icons.edit),
          onPressed: () => Get.toNamed('/{{.LowerPluralStructName}}/edit/${item.id}', arguments: item),
          color: Colors.orange,
          tooltip: 'Edit',
        ),
        IconButton(
          icon: const Icon(Icons.delete),
          onPressed: () => _confirmDelete(item),
          color: Colors.red,
          tooltip: 'Delete',
        ),
      ],
    );
  }

  void _confirmDelete({{.StructName}} item) {
    Get.dialog(
      AlertDialog(
        title: const Text('Confirm Delete'),
        content: Text('Are you sure you want to delete this {{.StructName | toLower}}?'),
        actions: [
          TextButton(
            onPressed: () => Get.back(),
            child: const Text('Cancel'),
          ),
          TextButton(
            onPressed: () {
              Get.back();
              controller.delete{{.StructName}}(item.id);
            },
            style: TextButton.styleFrom(foregroundColor: Colors.red),
            child: const Text('Delete'),
          ),
        ],
      ),
    );
  }
}
