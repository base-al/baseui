import 'package:flutter/material.dart';
import 'package:get/get.dart';
import '../models/{{.StructName | toSnakeCase}}.dart';
import '../services/{{.StructName | toSnakeCase}}_service.dart';

class {{.PluralName}}Controller extends GetxController {
  final {{.StructName}}Service {{.StructName | toLower}}Service;

  final isLoading = false.obs;
  final items = <{{.StructName}}>[].obs;
  final totalItems = 0.obs;
  final currentPage = 1.obs;
  final itemsPerPage = 10.obs;
  final totalPages = 0.obs;
  final searchQuery = ''.obs;
  final isGridView = false.obs;

  {{.PluralName}}Controller({required this.{{.StructName | toLower}}Service});

  @override
  void onInit() {
    super.onInit();
    refreshData();
  }

  Future<void> refreshData() async {
    currentPage.value = 1;
    await loadData();
  }

  Future<void> loadData() async {
    isLoading.value = true;

    try {
      final response = await {{.StructName | toLower}}Service.get{{.PluralName}}(
        page: currentPage.value,
        limit: itemsPerPage.value,
        search: searchQuery.value,
      );

      if (response.body == null) throw 'No response data';

      final data = response.body!['data'] as List;
      final pagination = response.body!['pagination'] as Map<String, dynamic>;

      items.value = data.map((json) => {{.StructName}}.fromJson(json as Map<String, dynamic>)).toList();
      totalItems.value = pagination['total'] as int;
      totalPages.value = pagination['total_pages'] as int;

    } catch (e) {
      _showError('Failed to load {{.LowerPluralStructName}}', e);
    } finally {
      isLoading.value = false;
    }
  }

  Future<void> create{{.StructName}}(Map<String, dynamic> data) async {
    try {
      isLoading.value = true;
      final response = await {{.StructName | toLower}}Service.create{{.StructName}}(data);

      if (response.isOk) {
        await refreshData();
        Get.back();
        _showSuccess('{{.StructName}} created successfully');
      } else {
        throw response.statusText ?? 'Failed to create';
      }
    } catch (e) {
      _showError('Failed to create {{.StructName | toLower}}', e);
    } finally {
      isLoading.value = false;
    }
  }

  Future<void> update{{.StructName}}(int id, Map<String, dynamic> data) async {
    try {
      isLoading.value = true;
      final response = await {{.StructName | toLower}}Service.update{{.StructName}}(id, data);

      if (response.isOk) {
        await refreshData();
        Get.back();
        _showSuccess('{{.StructName}} updated successfully');
      } else {
        throw response.statusText ?? 'Failed to update';
      }
    } catch (e) {
      _showError('Failed to update {{.StructName | toLower}}', e);
    } finally {
      isLoading.value = false;
    }
  }

  Future<void> delete{{.StructName}}(int id) async {
    try {
      isLoading.value = true;
      final response = await {{.StructName | toLower}}Service.delete{{.StructName}}(id);

      if (response.isOk) {
        await refreshData();
        _showSuccess('{{.StructName}} deleted successfully');
      } else {
        throw response.statusText ?? 'Failed to delete';
      }
    } catch (e) {
      _showError('Failed to delete {{.StructName | toLower}}', e);
    } finally {
      isLoading.value = false;
    }
  }

  Future<{{.StructName}}?> get{{.StructName}}(int id) async {
    try {
      isLoading.value = true;
      final response = await {{.StructName | toLower}}Service.get{{.StructName}}(id);

      if (response.isOk && response.body != null) {
        return {{.StructName}}.fromJson(response.body as Map<String, dynamic>);
      }
      return null;
    } catch (e) {
      _showError('Failed to get {{.StructName | toLower}}', e);
      return null;
    } finally {
      isLoading.value = false;
    }
  }

  Future<void> loadSortedData() async {
    try {
      isLoading.value = true;
      final response = await {{.StructName | toLower}}Service.getSorted();

      if (response.isOk && response.body != null) {
        final data = response.body as List;
        items.value = data.map((json) => {{.StructName}}.fromJson(json as Map<String, dynamic>)).toList();
      } else {
        _showError('Failed to load sorted items', response.statusText ?? 'Unknown error');
      }
    } catch (e) {
      _showError('Failed to load sorted items', e);
    } finally {
      isLoading.value = false;
    }
  }

  void updateItemOrder(int oldIndex, int newIndex) {
    if (oldIndex < newIndex) {
      newIndex -= 1;
    }

    // Update local list first
    final List<{{.StructName}}> updatedItems = [...items];
    final item = updatedItems.removeAt(oldIndex);
    updatedItems.insert(newIndex, item);
    items.value = updatedItems;

    // Create sorted IDs list - ensure we're sending uint values
    final List<int> sortedIds = updatedItems
        .map((item) => item.id)
        .where((id) => id > 0)
        .toList();

    debugPrint('Updating sort order with IDs: $sortedIds');
    _updateSortOrder(sortedIds);
  }

  Future<void> _updateSortOrder(List<int> sortedIds) async {
    try {
      isLoading.value = true;
      final response = await {{.StructName | toLower}}Service.updateSort(sortedIds);

      if (!response.isOk) {
        // Revert to original order on error
        await loadSortedData();
        throw Exception(response.statusText ?? 'Failed to update sort order');
      }

      _showSuccess('Sort order updated successfully');
    } catch (e) {
      _showError('Failed to update sort order', e);
      // Refresh to ensure consistency
      await loadSortedData();
    } finally {
      isLoading.value = false;
    }
  }

  void onSearch(String query) {
    searchQuery.value = query;
    refreshData();
  }

  void _showSuccess(String message) {
    Get.snackbar(
      'Success',
      message,
      snackPosition: SnackPosition.BOTTOM,
    );
  }

  void _showError(String message, dynamic error) {
    Get.snackbar(
      'Error',
      '$message: $error',
      snackPosition: SnackPosition.BOTTOM,
      backgroundColor: Colors.red.shade100,
      colorText: Colors.red.shade900,
    );
  }
}
