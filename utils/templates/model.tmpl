import 'package:flutter/material.dart';

class {{.StructName}} {
  final int id;
  final DateTime? deletedAt;
  final DateTime createdAt;
  final DateTime updatedAt;
  {{range .Fields}}
  final {{.Type}}? {{.Name | toCamelCase}};
  {{- end}}

  {{.StructName}}({
    required this.id,
    this.deletedAt,
    required this.createdAt,
    required this.updatedAt,
    {{- range .Fields}}
    this.{{.Name | toCamelCase}},
    {{- end}}
  });

  factory {{.StructName}}.fromJson(Map<String, dynamic> json) {
    try {
      debugPrint('Parsing JSON: $json');

      // Helper function to get field value checking both cases
      T? getField<T>(String fieldName) {
        return json[fieldName] as T? ?? json[fieldName.toLowerCase()] as T?;
      }

      // Helper function for DateTime fields
      DateTime? parseDateTime(String fieldName) {
        final value = json[fieldName] ?? json[fieldName.toLowerCase()];
        if (value == null || value == '0001-01-01T00:00:00Z') {
          return null;
        }
        return DateTime.parse(value as String);
      }

      return {{.StructName}}(
        id: getField<int>('ID') ?? getField<int>('id') ?? 0,
        deletedAt: parseDateTime('DeletedAt') ?? parseDateTime('deleted_at'),
        createdAt: parseDateTime('CreatedAt') ?? parseDateTime('created_at') ?? DateTime.now(),
        updatedAt: parseDateTime('UpdatedAt') ?? parseDateTime('updated_at') ?? DateTime.now(),
        {{- range .Fields}}
        {{- if eq .Type "DateTime"}}
        {{.Name | toCamelCase}}: parseDateTime('{{.JSONName}}'),
        {{- else if eq .Type "int"}}
        {{.Name | toCamelCase}}: getField<int>('{{.JSONName}}'),
        {{- else if eq .Type "double" "float"}}
        {{.Name | toCamelCase}}: getField<double>('{{.JSONName}}'),
        {{- else if eq .Type "bool"}}
        {{.Name | toCamelCase}}: getField<bool>('{{.JSONName}}'),
        {{- else}}
        {{.Name | toCamelCase}}: getField<String>('{{.JSONName}}') ?? '',
        {{- end}}
        {{- end}}
      );
    } catch (e, stackTrace) {
      debugPrint('Error creating {{.StructName}} from JSON: $e');
      debugPrint('Stack trace: $stackTrace');
      rethrow;
    }
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'deleted_at': deletedAt?.toIso8601String(),
      'created_at': createdAt.toIso8601String(),
      'updated_at': updatedAt.toIso8601String(),
      {{- range .Fields}}
      '{{.JSONName}}': {{.Name | toCamelCase}},
      {{- end}}
    };
  }

  {{.StructName}} copyWith({
    int? id,
    DateTime? deletedAt,
    DateTime? createdAt,
    DateTime? updatedAt,
    {{- range .Fields}}
    {{.Type}}? {{.Name | toCamelCase}},
    {{- end}}
  }) {
    return {{.StructName}}(
      id: id ?? this.id,
      deletedAt: deletedAt ?? this.deletedAt,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      {{- range .Fields}}
      {{.Name | toCamelCase}}: {{.Name | toCamelCase}} ?? this.{{.Name | toCamelCase}},
      {{- end}}
    );
  }

  factory {{.StructName}}.empty() {
    return {{.StructName}}(
      id: 0,
      deletedAt: null,
      createdAt: DateTime.now(),
      updatedAt: DateTime.now(),
      {{- range .Fields}}
      {{- if eq .Type "String"}}
      {{.Name | toCamelCase}}: '',
      {{- else if eq .Type "int"}}
      {{.Name | toCamelCase}}: 0,
      {{- else if eq .Type "double"}}
      {{.Name | toCamelCase}}: 0.0,
      {{- else if eq .Type "bool"}}
      {{.Name | toCamelCase}}: false,
      {{- else if eq .Type "DateTime"}}
      {{.Name | toCamelCase}}: null,
      {{- else}}
      {{.Name | toCamelCase}}: null,
      {{- end}}
      {{- end}}
    );
  }

  factory {{.StructName}}.create({
    {{- range .Fields}}
    {{.Type}}? {{.Name | toCamelCase}},
    {{- end}}
  }) {
    return {{.StructName}}(
      id: 0,
      deletedAt: null,
      createdAt: DateTime.now(),
      updatedAt: DateTime.now(),
      {{- range .Fields}}
      {{.Name | toCamelCase}}: {{.Name | toCamelCase}} ?? {{- if eq .Type "String"}}''{{- else if eq .Type "int"}}0{{- else if eq .Type "double"}}0.0{{- else if eq .Type "bool"}}false{{- else}}null{{- end}},
      {{- end}}
    );
  }

  bool get isDeleted => deletedAt != null;
}