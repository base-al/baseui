import 'package:flutter/material.dart';
import 'package:get/get.dart';
{{- range .Fields}}
{{- if eq .Type "DateTime"}}
import 'package:intl/intl.dart';
{{- end}}
{{- end}}

import '../controllers/{{.StructName | toSnakeCase}}_controller.dart';
import '../models/{{.StructName | toSnakeCase}}.dart';

class {{.StructName}}Edit extends GetView<{{.PluralName}}Controller> {
  {{.StructName}}Edit({super.key});

  final _formKey = GlobalKey<FormState>();

  {{- range .Fields}}
  {{- if eq .Type "DateTime"}}
  final dateFormat = DateFormat('yyyy-MM-dd HH:mm');
  final Rx<DateTime?> selected{{.Name | toPascalCase}} = Rx<DateTime?>(null);
  final TextEditingController {{.Name | toCamelCase}}Controller = TextEditingController();
  {{- else if eq .Type "bool"}}
  final Rx<bool> {{.Name | toCamelCase}}Checkbox = Rx<bool>(false);
  {{- else}}
  final TextEditingController {{.Name | toCamelCase}}Controller = TextEditingController();
  {{- end}}
  {{- end}}

  @override
  Widget build(BuildContext context) {
    final {{.StructName}} item = Get.arguments;

    // Initialize controllers and state with existing values
    {{- range .Fields}}
    {{- if eq .Type "DateTime"}}
    if (item.{{.Name | toCamelCase}} != null) {
      selected{{.Name | toPascalCase}}.value = item.{{.Name | toCamelCase}};
      {{.Name | toCamelCase}}Controller.text = dateFormat.format(item.{{.Name | toCamelCase}}!);
    }
    {{- else if eq .Type "bool"}}
    {{.Name | toCamelCase}}Checkbox.value = item.{{.Name | toCamelCase}} ?? false;
    {{- else}}
    {{.Name | toCamelCase}}Controller.text = item.{{.Name | toCamelCase}}?.toString() ?? '';
    {{- end}}
    {{- end}}

    return Scaffold(
      appBar: AppBar(
        title: const Text('Edit {{.StructName}}'),
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: Column(
            children: [
              {{- range .Fields}}
              {{- if eq .Type "DateTime"}}
              TextFormField(
                controller: {{.Name | toCamelCase}}Controller,
                decoration: const InputDecoration(
                  labelText: '{{.Name | toTitleCase}}',
                  suffixIcon: Icon(Icons.calendar_today),
                ),
                readOnly: true,
                onTap: () async {
                  final DateTime? picked = await showDatePicker(
                    context: context,
                    initialDate: selected{{.Name | toPascalCase}}.value ?? DateTime.now(),
                    firstDate: DateTime(2000),
                    lastDate: DateTime(2100),
                  );
                  if (!context.mounted) return;
                  if (picked != null) {
                    final TimeOfDay? time = await showTimePicker(
                      context: context,
                      initialTime: TimeOfDay.fromDateTime(selected{{.Name | toPascalCase}}.value ?? DateTime.now()),
                    );
                    if (context.mounted && time != null) {
                      selected{{.Name | toPascalCase}}.value = DateTime(
                        picked.year,
                        picked.month,
                        picked.day,
                        time.hour,
                        time.minute,
                      );
                      {{.Name | toCamelCase}}Controller.text = dateFormat.format(selected{{.Name | toPascalCase}}.value!);
                    }
                  }
                },
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please select {{.Name | toLower}}';
                  }
                  return null;
                },
              ),
              {{- else if eq .Type "bool"}}
              Obx(() => CheckboxListTile(
                title: const Text('{{.Name | toTitleCase}}'),
                value: {{.Name | toCamelCase}}Checkbox.value,
                onChanged: (bool? value) {
                  {{.Name | toCamelCase}}Checkbox.value = value ?? false;
                },
              )),
              {{- else if eq .Type "int"}}
              TextFormField(
                controller: {{.Name | toCamelCase}}Controller,
                decoration: const InputDecoration(labelText: '{{.Name | toTitleCase}}'),
                keyboardType: TextInputType.number,
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter {{.Name | toLower}}';
                  }
                  if (int.tryParse(value) == null) {
                    return 'Please enter a valid number';
                  }
                  return null;
                },
              ),
              {{- else if eq .Type "double" "float"}}
              TextFormField(
                controller: {{.Name | toCamelCase}}Controller,
                decoration: const InputDecoration(labelText: '{{.Name | toTitleCase}}'),
                keyboardType: const TextInputType.numberWithOptions(decimal: true),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter {{.Name | toLower}}';
                  }
                  if (double.tryParse(value) == null) {
                    return 'Please enter a valid number';
                  }
                  return null;
                },
              ),
              {{- else}}
              TextFormField(
                controller: {{.Name | toCamelCase}}Controller,
                decoration: const InputDecoration(labelText: '{{.Name | toTitleCase}}'),
                {{- if eq .Name "email"}}
                keyboardType: TextInputType.emailAddress,
                {{- end}}
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter {{.Name | toLower}}';
                  }
                  {{- if eq .Type "String"}}
                  {{- if eq .Name "email"}}
                  if (!GetUtils.isEmail(value)) {
                    return 'Please enter a valid email';
                  }
                  {{- end}}
                  {{- end}}
                  return null;
                },
              ),
              {{- end}}
              const SizedBox(height: 16),
              {{- end}}
              ElevatedButton(
                onPressed: () {
                  if (_formKey.currentState!.validate()) {
                    final Map<String, dynamic> data = {
                      {{- range .Fields}}
                      '{{.Name | toSnakeCase}}': {{- if eq .Type "DateTime"}}selected{{.Name | toPascalCase}}.value
                      {{- else if eq .Type "int"}}int.tryParse({{.Name | toCamelCase}}Controller.text)
                      {{- else if eq .Type "double" "float"}}double.tryParse({{.Name | toCamelCase}}Controller.text)
                      {{- else if eq .Type "bool"}}{{.Name | toCamelCase}}Checkbox.value
                      {{- else}}{{.Name | toCamelCase}}Controller.text{{- end}},
                      {{- end}}
                    };

                    controller.update{{.StructName}}(item.id, data);
                  }
                },
                child: const Text('Update {{.StructName}}'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
